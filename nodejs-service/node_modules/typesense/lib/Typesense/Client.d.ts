import Configuration, { ConfigurationOptions } from "typesense/lib/Typesense/Configuration";
import ApiCall from "typesense/lib/Typesense/ApiCall";
import Collections from "typesense/lib/Typesense/Collections";
import Collection from "typesense/lib/Typesense/Collection";
import Aliases from "typesense/lib/Typesense/Aliases";
import Alias from "typesense/lib/Typesense/Alias";
import Keys from "typesense/lib/Typesense/Keys";
import Key from "typesense/lib/Typesense/Key";
import Debug from "typesense/lib/Typesense/Debug";
import Metrics from "typesense/lib/Typesense/Metrics";
import Health from "typesense/lib/Typesense/Health";
import Operations from "typesense/lib/Typesense/Operations";
import MultiSearch from "typesense/lib/Typesense/MultiSearch";
import Presets from "typesense/lib/Typesense/Presets";
import Preset from "typesense/lib/Typesense/Preset";
import Analytics from "typesense/lib/Typesense/Analytics";
import Stopwords from "typesense/lib/Typesense/Stopwords";
import Stopword from "typesense/lib/Typesense/Stopword";
import Conversations from "typesense/lib/Typesense/Conversations";
import Conversation from "typesense/lib/Typesense/Conversation";
export default class Client {
    configuration: Configuration;
    apiCall: ApiCall;
    debug: Debug;
    metrics: Metrics;
    health: Health;
    operations: Operations;
    multiSearch: MultiSearch;
    analytics: Analytics;
    private readonly _collections;
    private readonly individualCollections;
    private readonly _aliases;
    private readonly individualAliases;
    private readonly _keys;
    private readonly individualKeys;
    private readonly _presets;
    private readonly individualPresets;
    private readonly _stopwords;
    private readonly individualStopwords;
    private readonly _conversations;
    private readonly individualConversations;
    constructor(options: ConfigurationOptions);
    collections(): Collections;
    collections<T extends Record<string, any> = object>(collectionName: string): Collection<T>;
    aliases(): Aliases;
    aliases(aliasName: string): Alias;
    keys(): Keys;
    keys(id: number): Key;
    presets(): Presets;
    presets(id: string): Preset;
    stopwords(): Stopwords;
    stopwords(id: string): Stopword;
    conversations(): Conversations;
    conversations(id: string): Conversation;
}
